// // add routes
// const router = require('./routes/router.js');
// app.use('/api', router);



if(!user) {
            bcrypt.hash(req.body.password, 10, (err, hash) => {
                userData.password = hash;
                User.create(userData)
                .then(user => {
                    res.json({status: user.email + ' registered'})
                })
                .catch(err => {
                    res.send('error: ' + err)
                })
            })
        } else {
            res.json({error: 'User already exists'})
        }
    })
    .catch(err => {
        res.send('error:' + err)
    })
})

users.post('/login', (req, res) => {
    User.findOne({
        email: req.body.email
    })
    .then(user => {
        if(user) {
            if(bcrypt.compareSync(req.body.password, user.password)) {
                const payload = {
                    _id: user._id,
                    name: user.name,
                    email: user.email
                }
                let token = jwt.sign(payload, process.env.SECRET_KEY, {
                    expiresIn: 1440
                })
                res.send(token)
            } else {
                res.json({ error: 'User does not exist' })
            }
        } else {
            res.json({ error: 'User does not exist' })
        }
    })
    .catch(err => {
        res.send('error: ' + err)
    })
})








 router.post('/login', (req, res) => {
     User.findOne({
         email: req.body.email
     })
     .then(user => {
        if(!user) {
            return res.status(404).json({
                success: false,
                msg: `Incorrect Login details, User does not exist`
            })
        }

        bcrypt.compareSync(req.body.password, user.password)
        .then(isMatch => {
            if(isMatch) {
                const payload = {
                    _id: user._id,
                    name: user.name,
                    email: user.email
                }
                jwt.sign(payload, key, { expiresIn: 604800 }, (err, token) => {
                    res.status(200).json({
                        success: true,
                        token: `Bearer ${token}`,
                        msg: `User Login Successful`
                    });
                })
            } else {
                return res.status(404).json({
                    success: false,
                    msg: `Incorrect Login details, User does not exist`
                })
            }
        })
     })
}












     router.post('/login', (req, res) => {
    User.findOne({
        username: req.body.username
    }).then(user => {
        if (!user) {
            return res.status(404).json({
                msg: "Username is not found.",
                success: false
            });
        }
        // If there is user we are now going to compare the password
        bcrypt.compare(req.body.password, user.password).then(isMatch => {
            if (isMatch) {
                // User's password is correct and we need to send the JSON Token for that user
                const payload = {
                    _id: user._id,
                    username: user.username,
                    name: user.name,
                    email: user.email
                }
                jwt.sign(payload, key, {
                    expiresIn: 604800
                }, (err, token) => {
                    res.status(200).json({
                        success: true,
                        token: `Bearer ${token}`,
                        user: user,
                        msg: "User Login Successful."
                    });
                })
            } else {
                return res.status(404).json({
                    msg: "Wrong Login details",
                    success: false
                });
            }
        })
    });
});





//     axios.post('users/login', {
    //       email: this.email,
    //       password: this.password
    //     }).then(res => {
    //       localStorage.setItem('usertoken', res.data)
    //       this.email = ''
    //       this.password = ''
    //       router.push({ name: 'Index' })
    //     }).catch(err => {
    //       // console.log(err)
    //       return err
    //     })
    //     // this.emitMethod()
    //     // this.login()


     let user = {
           email: this.email,
           password: this.password
         };

          this.login(user)